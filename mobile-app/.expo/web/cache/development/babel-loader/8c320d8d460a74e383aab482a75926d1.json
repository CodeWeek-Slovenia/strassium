{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\aljaz\\\\Main\\\\Development\\\\SmartFood\\\\main\\\\node_modules\\\\react-native-android-image-polyfill\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar isAndroid = function isAndroid() {\n  return Platform.OS === 'android';\n};\n\nvar ImagePolyfill = function (_React$Component) {\n  _inherits(ImagePolyfill, _React$Component);\n\n  var _super = _createSuper(ImagePolyfill);\n\n  function ImagePolyfill() {\n    _classCallCheck(this, ImagePolyfill);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ImagePolyfill, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (isAndroid() && this.props.onError && this.props.source && this.props.source.uri) {\n        this.verifyImage();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.source && nextProps.source.uri && (!this.props.source || this.props.source.uri !== nextProps.source.uri) && isAndroid() && nextProps.onError) {\n        this.verifyImage();\n      }\n    }\n  }, {\n    key: \"verifyImage\",\n    value: function verifyImage() {\n      var _this = this;\n\n      var uri = this.props.source.uri;\n      Image.prefetch(uri).catch(function (e) {\n        return _this.props.onError(e);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Image, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return ImagePolyfill;\n}(React.Component);\n\nImagePolyfill.propTypes = Image.propTypes;\nImagePolyfill.defaultProps = Image.defaultProps;\nexport { ImagePolyfill as default };","map":{"version":3,"sources":["C:/Users/aljaz/Main/Development/SmartFood/main/node_modules/react-native-android-image-polyfill/index.js"],"names":["React","isAndroid","Platform","OS","ImagePolyfill","props","onError","source","uri","verifyImage","nextProps","Image","prefetch","catch","e","Component","propTypes","defaultProps"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAMC,QAAQ,CAACC,EAAT,KAAgB,SAAtB;AAAA,CAAlB;;IAQqBC,a;;;;;;;;;;;;;WAQnB,8BAAqB;AACnB,UAAIH,SAAS,MAAM,KAAKI,KAAL,CAAWC,OAA1B,IAAqC,KAAKD,KAAL,CAAWE,MAAhD,IAA0D,KAAKF,KAAL,CAAWE,MAAX,CAAkBC,GAAhF,EAAqF;AACnF,aAAKC,WAAL;AACD;AACF;;;WAQD,mCAA0BC,SAA1B,EAAqC;AACnC,UAAIA,SAAS,CAACH,MAAV,IAAoBG,SAAS,CAACH,MAAV,CAAiBC,GAArC,KACD,CAAC,KAAKH,KAAL,CAAWE,MAAZ,IAAsB,KAAKF,KAAL,CAAWE,MAAX,CAAkBC,GAAlB,KAA0BE,SAAS,CAACH,MAAV,CAAiBC,GADhE,KAEFP,SAAS,EAFP,IAGFS,SAAS,CAACJ,OAHZ,EAIE;AACA,aAAKG,WAAL;AACD;AACF;;;WAaD,uBAAc;AAAA;;AACZ,UAAKD,GAAL,GAAY,KAAKH,KAAL,CAAWE,MAAvB,CAAKC,GAAL;AACAG,MAAAA,KAAK,CAACC,QAAN,CAAeJ,GAAf,EAAoBK,KAApB,CAA0B,UAAAC,CAAC;AAAA,eAAI,KAAI,CAACT,KAAL,CAAWC,OAAX,CAAmBQ,CAAnB,CAAJ;AAAA,OAA3B;AACD;;;WAED,kBAAS;AACP,aAAO,oBAAC,KAAD,eAAW,KAAKT,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAhDwCL,KAAK,CAACe,S;;AAA5BX,a,CACZY,S,GAAYL,KAAK,CAACK,S;AADNZ,a,CAEZa,Y,GAAeN,KAAK,CAACM,Y;SAFTb,a","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport {Image, Platform} from 'react-native';\n\nconst isAndroid = () => Platform.OS === 'android';\n\n/**\n * An extension of the Image class which fixes an Android bug where remote images wouldn't fire the\n * Image#onError() callback when the image failed to load due to a 404 response.\n *\n * This component should only be used for loading remote images, not local resources.\n */\nexport default class ImagePolyfill extends React.Component {\n  static propTypes = Image.propTypes;\n  static defaultProps = Image.defaultProps;\n\n  /**\n   * When the component will mount, verify the image on Android.\n   * @return {void}\n   */\n  componentWillMount() {\n    if (isAndroid() && this.props.onError && this.props.source && this.props.source.uri) {\n      this.verifyImage();\n    }\n  }\n\n  /**\n   * When the image changes on Android, verify the image.\n   *\n   * @param  {Object} nextProps The next incoming properties.\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.source && nextProps.source.uri &&\n      (!this.props.source || this.props.source.uri !== nextProps.source.uri) &&\n      isAndroid() &&\n      nextProps.onError\n    ) {\n      this.verifyImage();\n    }\n  }\n\n  /**\n   * `Image.prefetch` is used to load the image and `catch` the failure.\n   * Android's `Image` `onError` callback does not get invoked if the remote image fails to load with a `404`.\n   * Prefetch, however, will reject the promise if it fails to load, allowing us to detect failures to\n   * provide better fallback support.\n   *\n   * Android only.\n   * https://github.com/facebook/react-native/issues/7440\n   *\n   * @return {void}\n   */\n  verifyImage() {\n    var {uri} = this.props.source;\n    Image.prefetch(uri).catch(e => this.props.onError(e));\n  }\n\n  render() {\n    return <Image {...this.props} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}