{"ast":null,"code":"import Easing from \"react-native-web/dist/exports/Easing\";\nimport { createInterpolation } from \"./create-interpolation\";\nvar easeInOut = Easing.bezier(0.42, 0, 0.58, 1);\nvar TOTAL_STOPS_PER_TRANSITION = 16;\n\nfunction easeGradient(_ref) {\n  var colorStops = _ref.colorStops,\n      _ref$easing = _ref.easing,\n      easing = _ref$easing === void 0 ? easeInOut : _ref$easing;\n  var colors = [];\n  var locations = [];\n  var initialLocations = Object.keys(colorStops).map(function (key) {\n    return Number(key);\n  }).sort();\n  var totalColorStops = initialLocations.length;\n\n  for (var currentStopIndex = 0; currentStopIndex < totalColorStops - 1; currentStopIndex++) {\n    var _colorStops$startLoca;\n\n    var startLocation = initialLocations[currentStopIndex];\n    var endLocation = initialLocations[currentStopIndex + 1];\n    var startColor = colorStops[startLocation].color;\n    var endColor = colorStops[endLocation].color;\n    var currentEasing = (_colorStops$startLoca = colorStops[startLocation].easing) !== null && _colorStops$startLoca !== void 0 ? _colorStops$startLoca : easing;\n    var colorScale = createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [startColor, endColor],\n      easing: currentEasing\n    });\n    var currentTransitionLength = endLocation - startLocation;\n    var stepSize = 1 / (TOTAL_STOPS_PER_TRANSITION - 1);\n\n    for (var stepIndex = 0; stepIndex <= TOTAL_STOPS_PER_TRANSITION - 1; stepIndex++) {\n      var progress = stepIndex * stepSize;\n      var color = colorScale(progress);\n      colors.push(color);\n      locations.push(startLocation + currentTransitionLength * progress);\n    }\n  }\n\n  return {\n    colors: colors,\n    locations: locations\n  };\n}\n\nexport { easeGradient };","map":{"version":3,"sources":["index.ts"],"names":["easeInOut","Easing","TOTAL_STOPS_PER_TRANSITION","easing","colors","locations","initialLocations","Object","key","Number","totalColorStops","currentStopIndex","startLocation","endLocation","startColor","colorStops","endColor","currentEasing","colorScale","createInterpolation","inputRange","outputRange","currentTransitionLength","stepSize","stepIndex","progress","color"],"mappings":";AACA,SAAA,mBAAA;AAcA,IAAMA,SAAS,GAAGC,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,IAAAA,EAAlB,CAAkBA,CAAlB;AACA,IAAMC,0BAA0B,GAAhC,EAAA;;AAEA,SAAA,YAAA,OAA0E;AAAA,MAApD,UAAoD,QAApD,UAAoD;AAAA,yBAAtCC,MAAsC;AAAA,MAAtCA,MAAsC,4BAA7BH,SAA6B;AACxE,MAAMI,MAAgB,GAAtB,EAAA;AACA,MAAMC,SAAmB,GAAzB,EAAA;AAEA,MAAMC,gBAAgB,GAAGC,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,GAAAA,CACjBC,UAAAA,GAAD;AAAA,WAASC,MAAM,CADGF,GACH,CAAf;AAAA,GADkBA,EAAzB,IAAyBA,EAAzB;AAIA,MAAMG,eAAe,GAAGJ,gBAAgB,CAAxC,MAAA;;AAEA,OACE,IAAIK,gBAAgB,GADtB,CAAA,EAEEA,gBAAgB,GAAGD,eAAe,GAFpC,CAAA,EAGEC,gBAHF,EAAA,EAIE;AAAA,QAAA,qBAAA;;AACA,QAAMC,aAAa,GAAGN,gBAAgB,CAAtC,gBAAsC,CAAtC;AACA,QAAMO,WAAW,GAAGP,gBAAgB,CAACK,gBAAgB,GAArD,CAAoC,CAApC;AAEA,QAAMG,UAAU,GAAGC,UAAU,CAAVA,aAAU,CAAVA,CAAnB,KAAA;AACA,QAAMC,QAAQ,GAAGD,UAAU,CAAVA,WAAU,CAAVA,CAAjB,KAAA;AACA,QAAME,aAAa,GAAA,CAAA,qBAAA,GAAGF,UAAU,CAAVA,aAAU,CAAVA,CAAH,MAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAnB,MAAA;AAEA,QAAMG,UAAU,GAAGC,mBAAmB,CAAC;AACrCC,MAAAA,UAAU,EAAE,CAAA,CAAA,EADyB,CACzB,CADyB;AAErCC,MAAAA,WAAW,EAAE,CAAA,UAAA,EAFwB,QAExB,CAFwB;AAGrClB,MAAAA,MAAM,EAAEc;AAH6B,KAAD,CAAtC;AAMA,QAAMK,uBAAuB,GAAGT,WAAW,GAA3C,aAAA;AACA,QAAMU,QAAQ,GAAG,KAAKrB,0BAA0B,GAAhD,CAAiB,CAAjB;;AAEA,SACE,IAAIsB,SAAS,GADf,CAAA,EAEEA,SAAS,IAAItB,0BAA0B,GAFzC,CAAA,EAGEsB,SAHF,EAAA,EAIE;AACA,UAAMC,QAAQ,GAAGD,SAAS,GAA1B,QAAA;AACA,UAAME,KAAK,GAAGR,UAAU,CAAxB,QAAwB,CAAxB;AACAd,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AACAC,MAAAA,SAAS,CAATA,IAAAA,CAAeO,aAAa,GAAGU,uBAAuB,GAAtDjB,QAAAA;AACD;AACF;;AAED,SAAO;AAAED,IAAAA,MAAF,EAAEA,MAAF;AAAUC,IAAAA,SAAAA,EAAAA;AAAV,GAAP;AACD;;AAED,SAAA,YAAA","sourcesContent":["import { Easing, EasingFunction } from 'react-native'\nimport { createInterpolation } from './create-interpolation'\n\ninterface ColorStops {\n  [location: number]: {\n    color: string\n    easing?: EasingFunction\n  }\n}\n\ninterface GradientParams {\n  colorStops: ColorStops\n  easing?: EasingFunction\n}\n\nconst easeInOut = Easing.bezier(0.42, 0, 0.58, 1)\nconst TOTAL_STOPS_PER_TRANSITION = 16\n\nfunction easeGradient({ colorStops, easing = easeInOut }: GradientParams) {\n  const colors: string[] = []\n  const locations: number[] = []\n\n  const initialLocations = Object.keys(colorStops)\n    .map((key) => Number(key))\n    .sort()\n\n  const totalColorStops = initialLocations.length\n\n  for (\n    let currentStopIndex = 0;\n    currentStopIndex < totalColorStops - 1;\n    currentStopIndex++\n  ) {\n    const startLocation = initialLocations[currentStopIndex]\n    const endLocation = initialLocations[currentStopIndex + 1]\n\n    const startColor = colorStops[startLocation].color\n    const endColor = colorStops[endLocation].color\n    const currentEasing = colorStops[startLocation].easing ?? easing\n\n    const colorScale = createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [startColor, endColor],\n      easing: currentEasing,\n    })\n\n    const currentTransitionLength = endLocation - startLocation\n    const stepSize = 1 / (TOTAL_STOPS_PER_TRANSITION - 1)\n\n    for (\n      let stepIndex = 0;\n      stepIndex <= TOTAL_STOPS_PER_TRANSITION - 1;\n      stepIndex++\n    ) {\n      const progress = stepIndex * stepSize\n      const color = colorScale(progress)\n      colors.push(color)\n      locations.push(startLocation + currentTransitionLength * progress)\n    }\n  }\n\n  return { colors, locations }\n}\n\nexport { easeGradient }\n"]},"metadata":{},"sourceType":"module"}