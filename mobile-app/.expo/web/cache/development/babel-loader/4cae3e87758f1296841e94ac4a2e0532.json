{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nvar cache = new Map();\n\nvar getImageSizeFromCache = function getImageSizeFromCache(image) {\n  if (typeof image === 'number') {\n    return cache.get(image);\n  } else {\n    return cache.get(image.uri);\n  }\n};\n\nvar loadImageSize = function loadImageSize(image) {\n  return new Promise(function (resolve, reject) {\n    if (typeof image === 'number') {\n      var _resolveAssetSource = resolveAssetSource(image),\n          width = _resolveAssetSource.width,\n          height = _resolveAssetSource.height;\n\n      resolve({\n        width: width,\n        height: height\n      });\n    } else {\n      Image.getSize(image.uri, function (width, height) {\n        resolve({\n          width: width,\n          height: height\n        });\n      }, reject);\n    }\n  });\n};\n\nexport var getImageSizeFitWidthFromCache = function getImageSizeFitWidthFromCache(image, toWidth) {\n  var size = getImageSizeFromCache(image);\n\n  if (size) {\n    var width = size.width,\n        height = size.height;\n    if (!width || !height) return {\n      width: 0,\n      height: 0\n    };\n    return {\n      width: toWidth,\n      height: toWidth * height / width\n    };\n  }\n\n  return {};\n};\n\nvar getImageSizeMaybeFromCache = function getImageSizeMaybeFromCache(image) {\n  var size;\n  return _regeneratorRuntime.async(function getImageSizeMaybeFromCache$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          size = getImageSizeFromCache(image);\n\n          if (size) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(loadImageSize(image));\n\n        case 4:\n          size = _context.sent;\n          cache.set(image, size);\n\n        case 6:\n          return _context.abrupt(\"return\", size);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport var getImageSizeFitWidth = function getImageSizeFitWidth(image, toWidth) {\n  var _await$getImageSizeMa, width, height;\n\n  return _regeneratorRuntime.async(function getImageSizeFitWidth$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getImageSizeMaybeFromCache(image));\n\n        case 2:\n          _await$getImageSizeMa = _context2.sent;\n          width = _await$getImageSizeMa.width;\n          height = _await$getImageSizeMa.height;\n\n          if (!(!width || !height)) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            width: 0,\n            height: 0\n          });\n\n        case 7:\n          return _context2.abrupt(\"return\", {\n            width: toWidth,\n            height: toWidth * height / width\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/aljaz/Main/Development/SmartFood/main/node_modules/react-native-auto-height-image/cache.js"],"names":["resolveAssetSource","cache","Map","getImageSizeFromCache","image","get","uri","loadImageSize","Promise","resolve","reject","width","height","Image","getSize","getImageSizeFitWidthFromCache","toWidth","size","getImageSizeMaybeFromCache","set","getImageSizeFitWidth"],"mappings":"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","sourcesContent":["/**\n * @since 2017-04-24 20:50:41\n * @author vivaxy\n */\n\nimport { Image } from 'react-native';\n// undocumented but part of react-native; see\n// https://github.com/facebook/react-native/issues/5603#issuecomment-297959695\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\n/**\n * store with\n *  key: image\n *  value: {\n *      width: 100,\n *      height: 100,\n *  }\n */\nconst cache = new Map();\n\nconst getImageSizeFromCache = (image) => {\n  if (typeof image === 'number') {\n    return cache.get(image);\n  } else {\n    return cache.get(image.uri);\n  }\n};\n\nconst loadImageSize = (image) => {\n  return new Promise((resolve, reject) => {\n    //number indicates import X or require(X) was used (i.e. local file)\n    if (typeof image === 'number') {\n      const { width, height } = resolveAssetSource(image);\n      resolve({ width, height });\n    } else {\n      Image.getSize(\n        image.uri,\n        (width, height) => {\n          // success\n          resolve({ width, height });\n        },\n        reject\n      );\n    }\n  });\n};\n\nexport const getImageSizeFitWidthFromCache = (image, toWidth) => {\n  const size = getImageSizeFromCache(image);\n  if (size) {\n    const { width, height } = size;\n    if (!width || !height) return { width: 0, height: 0 }\n    return { width: toWidth, height: toWidth * height / width };\n  }\n  return {};\n};\n\nconst getImageSizeMaybeFromCache = async (image) => {\n  let size = getImageSizeFromCache(image);\n  if (!size) {\n    size = await loadImageSize(image);\n    cache.set(image, size);\n  }\n  return size;\n};\n\nexport const getImageSizeFitWidth = async (image, toWidth) => {\n  const { width, height } = await getImageSizeMaybeFromCache(image);\n  if (!width || !height) return { width: 0, height: 0 }\n  return { width: toWidth, height: toWidth * height / width };\n};\n"]},"metadata":{},"sourceType":"module"}