{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\aljaz\\\\Main\\\\Development\\\\SmartFood\\\\main\\\\Views\\\\RecepiesScan.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as ImagePicker from 'expo-image-picker';\nimport TesseractOcr, { LANG_ENGLISH } from 'react-native-tesseract-ocr';\nimport SomeComponent from \"./CustomBackground\";\n\nfunction App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickedImagePath = _useState2[0],\n      setPickedImagePath = _useState2[1];\n\n  fetch('https://tojesubdomain69.loca.lt/uploader', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      imageString: 'this'\n    })\n  });\n\n  var showImagePicker = function showImagePicker() {\n    var permissionResult, result;\n    return _regeneratorRuntime.async(function showImagePicker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert(\"You've refused to allow this appp to access your photos!\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setPickedImagePath(result.uri);\n              console.log(result.uri);\n            }\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openCamera = function openCamera() {\n    var permissionResult, result, tessOptions, response;\n    return _regeneratorRuntime.async(function openCamera$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraPermissionsAsync());\n\n          case 2:\n            permissionResult = _context2.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context2.next = 6;\n              break;\n            }\n\n            alert(\"You've refused to allow this appp to access your camera!\");\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync());\n\n          case 8:\n            result = _context2.sent;\n            console.log(result);\n\n            if (result.cancelled) {\n              _context2.next = 19;\n              break;\n            }\n\n            setPickedImagePath(result.uri);\n            console.log(result.uri);\n            tessOptions = {};\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(TesseractOcr.recognize(pickedImagePath, LANG_ENGLISH, tessOptions));\n\n          case 16:\n            response = _context2.sent;\n            console.log(response);\n            console.log('past');\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SomeComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    onPress: showImagePicker,\n    title: \"Select an image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    onPress: openCamera,\n    title: \"Open camera\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.imageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, pickedImagePath !== '' && React.createElement(Image, {\n    source: {\n      uri: pickedImagePath\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 37\n    }\n  }))));\n}\n\nexport default App;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    width: 400,\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  imageContainer: {\n    padding: 30\n  },\n  image: {\n    width: 400,\n    height: 300,\n    resizeMode: 'cover'\n  }\n});","map":{"version":3,"sources":["C:/Users/aljaz/Main/Development/SmartFood/main/Views/RecepiesScan.js"],"names":["React","useState","ImagePicker","TesseractOcr","LANG_ENGLISH","SomeComponent","App","pickedImagePath","setPickedImagePath","fetch","method","headers","Accept","body","JSON","stringify","imageString","showImagePicker","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","result","console","log","cancelled","uri","openCamera","requestCameraPermissionsAsync","launchCameraAsync","tessOptions","recognize","response","styles","screen","buttonContainer","imageContainer","image","StyleSheet","create","flex","justifyContent","alignItems","width","flexDirection","padding","height","resizeMode"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, Image, Button } from 'react-native';\r\n\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport TesseractOcr, { LANG_ENGLISH } from 'react-native-tesseract-ocr';\r\nimport SomeComponent from './CustomBackground';\r\n\r\n\r\nfunction App() {\r\n  // The path of the picked image\r\n  const [pickedImagePath, setPickedImagePath] = useState('');\r\n\r\n  fetch('https://tojesubdomain69.loca.lt/uploader', {\r\n  method: 'POST',\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  },\r\n  body: JSON.stringify({\r\n    imageString:'this'\r\n  })\r\n});\r\n\r\n  // This function is triggered when the \"Select an image\" button pressed\r\n  const showImagePicker = async () => {\r\n    // Ask the user for the permission to access the media library \r\n    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n    if (permissionResult.granted === false) {\r\n      alert(\"You've refused to allow this appp to access your photos!\");\r\n      return;\r\n    }\r\n\r\n    const result = await ImagePicker.launchImageLibraryAsync();\r\n\r\n    // Explore the result\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n      setPickedImagePath(result.uri);\r\n      console.log(result.uri);\r\n    }\r\n  }\r\n\r\n  // This function is triggered when the \"Open camera\" button pressed\r\n  const openCamera = async () => {\r\n    // Ask the user for the permission to access the camera\r\n    const permissionResult = await ImagePicker.requestCameraPermissionsAsync();\r\n\r\n    if (permissionResult.granted === false) {\r\n      alert(\"You've refused to allow this appp to access your camera!\");\r\n      return;\r\n    }\r\n\r\n    const result = await ImagePicker.launchCameraAsync();\r\n\r\n    // Explore the result\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n      setPickedImagePath(result.uri);\r\n      console.log(result.uri);\r\n      const tessOptions = {};\r\n      const response = await TesseractOcr.recognize(pickedImagePath, LANG_ENGLISH, tessOptions);\r\n      console.log(response)\r\n      console.log('past')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SomeComponent>\r\n    <View style={styles.screen}>\r\n      <View style={styles.buttonContainer}>\r\n        <Button onPress={showImagePicker} title=\"Select an image\" />\r\n        <Button onPress={openCamera} title=\"Open camera\" />\r\n      </View>\r\n\r\n      <View style={styles.imageContainer}>\r\n        {\r\n          pickedImagePath !== '' && <Image\r\n            source={{ uri: pickedImagePath }}\r\n            style={styles.image}\r\n          />\r\n        }\r\n      </View>\r\n    </View>\r\n    </SomeComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// Kindacode.com\r\n// Just some styles\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  buttonContainer: {\r\n    width: 400,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around'\r\n  },\r\n  imageContainer: {\r\n    padding: 30\r\n  },\r\n  image: {\r\n    width: 400,\r\n    height: 300,\r\n    resizeMode: 'cover'\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}